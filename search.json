[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wissenskompendium Nachhaltigkeit in der IT",
    "section": "",
    "text": "Einführung"
  },
  {
    "objectID": "grundannahmen.html",
    "href": "grundannahmen.html",
    "title": "1  Grundannahmen",
    "section": "",
    "text": "Right to Repair?\nDimensionen von Nachhaltigkeit\n\n… bezogen auf SW, HW, IT, Betrieb, …\nWesentlichkeit -> welche Faktoren in welchem Bereich wie wichtig?\n\nÖkologisch / Sozial\n“lohnt sich finanziell”"
  },
  {
    "objectID": "software.html#software-auswahl",
    "href": "software.html#software-auswahl",
    "title": "2  Software",
    "section": "2.1 Software-Auswahl",
    "text": "2.1 Software-Auswahl\nDie Auswahl der “richtigen” Software ist schwierig: Der Markt ist schier endlos groß, regelmäßig kommt neue Software auf den Markt; und hin und wieder verschwindet auch Software wieder.\nJede Software löst ein gewisses Problem für eine Zielgruppe (hoffentlich :) ).\nWir beschreiben hier Kriterien, die bei Softwareauswahl in Hinblick auf Nachhaltigkeit helfen können. Ziel ist hier die Reduktion des sogenannten Vendor Lock-In, um zu ermöglichen, auch zu einem späteren Zeitpunkt die Software zu wechseln.\n\n2.1.1 Der besondere Wert von Daten\nViele Diskussionen drehen sich um die Auswahl bestimmter Software, kontrastiert Programme gegeneinander, usw. Wir empfehlen einen anderen Blick: Den Fokus auf die von der Software verarbeiteten Daten, wie bspw:\n\nDateien (Textdateien, Office-Dateien, Bild-Dateien)\nDatenbanken (Open Source oder Proprietär)\nE-Mails (empfangen oder senden)\nKommunikation mit fremden Systemen über Schnittstellen\n\n\n\n\nZusammenhang zwischen Software und den Daten, die sie konsumiert/produziert\n\n\nAls Erstes sollte für jede Software identifiziert werden, welche Daten diese verarbeitet oder ggf. erstellt. Für all diese Daten kann man sich folgende Fragen stellen:\n\n\n2.1.2 Sind Offene Standards als Datenformate möglich?\nWenn es für das zu lösende Problem offene Standards gibt, welche das Problem umfänglich lösen, ist dies ein sehr guter Startpunkt. Dann kann man - ausgehend von dem offenen Standard - weiter nach Softwarelösungen, welche diesen Standard implementieren, suchen.\nOffene Standards sind lizenzkostenfrei nutz- .und implementierbar, und “gehören” nicht einer einzelnen Firma, sondern in der Regel einem (mehr oder weniger formellen) Gremium aus mehreren Akteuren. Proprietäre Standards werden in der Regel nur von einzelnen Firmen herausgegeben; häufig fallen für Nutzung auch Lizenzkosten an.\n\n\n\nProblemstellung\nOffener Standard\nProprietärer Standard\n\n\n\n\nOffice-Dokumente\nODF - OASIS Open Document Format for Office Applications\nWord-Dateien (.doc, .docx) von Microsoft\n\n\nE-Mail-Abruf, Kontakte, gemeinsame Kalender (PIM-Suite)\nIMAP + Caldav + Carddav\nExchange / ActiveSync von Microsoft\n\n\ngemeinsamer Chat\nMatrix-Protokoll\nbspw. Slack, Microsoft Teams\n\n\n\nWenn man einen offenen Standard identifiziert hat, kann man von diesem ausgehend nach Software suchen, die ihn implementiert. Hier sind die weiteren Kriterien relevant (Open Source etc).\nFür viele Problemstellungen wird man noch keinen ubiquitären Standard finden. Daher sind weitere Kriterien relevant.\nMit ubiquitär meinen wir einen Standard, der sich duchgesetzt hat und breit, von vielen Marktteilnehmern, implementiert ist.\n\n\n2.1.3 Besitzt die Software eine standardisierte Schnittstelle?\nFalls es keinen etablierten Standard für das gewünschte Datenformat gibt, ist es hilfreich zu schauen, ob die Software eine Schnittstelle besitzt, über die alle Funktionen der Software abrufbar sind. Dies kann bspw. sein:\n\neine API (maschinenlesbare Schnittstelle) im OpenAPI oder GraphQL Format; oder aber ausführliche und vollständige Dokumentation der API\nVerwendung einer Open Source Datenbank zur Datenspeicherung: In diesem Falle kann man jederzeit auf die Rohdaten der Software zugreifen - gewissermaßen “an der Software vorbei”. Wir empfehlen hier uneingeschränkt nur reine Open Source Datenbanken wie SQLite, Postgres, MariaDB oder MySQL; da für kommerzielle Datenbanken häufig die Lizenzierung einen direkten Datenzugriff verbietet, oder aber eine sehr teure Lizenz nachgekauft werden muss.\nVerwendung von Open Source mit Erweiterungsmöglichkeiten. In diesem Fall kann in den Quellcode der Software direkt geschaut werden, und dieser entsprechend um Import/Exportfunktionen erweitert werden.\n\nZiel ist es, zu vermeiden, dass ein “Datensilo” entsteht, aus dem die Daten nicht mehr gewinnbringend und nachhaltig in der Organisation nutzbar sind.\n\n\n2.1.4 Nutzung von Open Source Software\nOpen Source Software ist Software unter einer OSI-kompatiblen Lizenz wie bspw. MIT oder GPL-Lizenz. Es gibt darüber hinaus auch Lizenzen, welche nach der strikten Definition nicht OSI-kompatibel sind, aber im Alltag für die meisten Szenarien trotzdem ähnlich verwendet werden können, wie bspw. die Business Source Lizenz. Die BSL ist entstanden, um zu verhindern, dass die großen Cloud-Anbieter wie Amazon oder Google Open Source Software kostenfrei einkaufen und als kostenpflichtigen Cloud-Dienst verkaufen können, ohne sich an der Weiterentwicklung der Software zu beteiligen.\nWir empfehlen uneingeschränkt die Nutzung von quelloffener Software, sofern diese existiert und die notwendigen Funktionen umfasst.\nBei Open Source Software, welche viele der Funktionen umfasst, aber einige Funktionen fehlen, empfehlen wir zu prüfen, ob ein Anbieter im Ökosystem der Software gefunden werden kann, der diese Funktionen im Open Source Kern der Software erweitert.\n\n\n\n\n\n\nHinweis\n\n\n\nOpen Source und Künstliche Intelligenz\nTODO: write here about weights\n\n“Weights” der KI != Open Source (meistens)\n\n\n\n\n\n2.1.5 SaaS\n\nVendor Lock In\nFokus auf Daten: SAAS produkt, welches nur quelloffene Daten generiert, kein großes Problem.\nOpen Source Anbieter (=Hersteller von Open Source) haben auch häufig SAAS im Angebot\nOpen Source und SAAS - bspw. Sentry -> kann funktionieren."
  },
  {
    "objectID": "software.html#hard-facts-messbare-kriterien",
    "href": "software.html#hard-facts-messbare-kriterien",
    "title": "2  Software",
    "section": "2.2 “Hard Facts” / Messbare Kriterien",
    "text": "2.2 “Hard Facts” / Messbare Kriterien\n\n2.2.1 Datentransfer\n\n\n2.2.2 Energieverbrauch\n\nEnergieverbrauch beim Trainieren von KI-Modellen\nEnergieverbrauch beim Nutzen von KI-Modellen (chatgpt)\n\n\n\n2.2.3 Datenvolumen/-speicher"
  },
  {
    "objectID": "sozial.html#do-not---dark-patterns",
    "href": "sozial.html#do-not---dark-patterns",
    "title": "3  Soziale Dimension",
    "section": "3.1 “do not” - Dark Patterns",
    "text": "3.1 “do not” - Dark Patterns"
  },
  {
    "objectID": "sozial.html#barrierefreiheit",
    "href": "sozial.html#barrierefreiheit",
    "title": "3  Soziale Dimension",
    "section": "3.2 Barrierefreiheit",
    "text": "3.2 Barrierefreiheit"
  },
  {
    "objectID": "sozial.html#biases-bspw.-bei-kialgorithmen",
    "href": "sozial.html#biases-bspw.-bei-kialgorithmen",
    "title": "3  Soziale Dimension",
    "section": "3.3 Biases (bspw. bei KI/Algorithmen)",
    "text": "3.3 Biases (bspw. bei KI/Algorithmen)"
  },
  {
    "objectID": "hardware.html#beschaffung",
    "href": "hardware.html#beschaffung",
    "title": "4  Hardware",
    "section": "4.1 Beschaffung",
    "text": "4.1 Beschaffung"
  },
  {
    "objectID": "hardware.html#betrieb",
    "href": "hardware.html#betrieb",
    "title": "4  Hardware",
    "section": "4.2 Betrieb",
    "text": "4.2 Betrieb"
  },
  {
    "objectID": "hardware.html#do-not---eingebaute-obsoleszenz",
    "href": "hardware.html#do-not---eingebaute-obsoleszenz",
    "title": "4  Hardware",
    "section": "4.3 “do not” - eingebaute Obsoleszenz",
    "text": "4.3 “do not” - eingebaute Obsoleszenz"
  },
  {
    "objectID": "betrieb.html",
    "href": "betrieb.html",
    "title": "5  Services (Betrieb von IT-Infrastruktur)",
    "section": "",
    "text": "Energy aware computing"
  },
  {
    "objectID": "sourcing.html",
    "href": "sourcing.html",
    "title": "6  Sourcing",
    "section": "",
    "text": "Beschaffung, Lieferketten IT\nAusschreibung\nCommunity - “Zurückgeben” an die Community bei Dienstleistern\n\nalso Dienstleister bevorzugen, die in der entsprechenden Open Source Community aktiv sind."
  },
  {
    "objectID": "quellen.html",
    "href": "quellen.html",
    "title": "Quellen",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "mitwirken.html#hilfreiche-quarto-funktionen",
    "href": "mitwirken.html#hilfreiche-quarto-funktionen",
    "title": "Mitwirken",
    "section": "hilfreiche Quarto Funktionen",
    "text": "hilfreiche Quarto Funktionen\n(aus der Dokumentation rauskopiert)\n\n\n\n\n\n\nHinweis\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\nSidebar text\nThis is a span that has the class aside which places it in the margin without a footnote number.\nSee Knuth (1984) for additional discussion of literate programming.\nHere is an inline note.1"
  },
  {
    "objectID": "mitwirken.html#footnotes",
    "href": "mitwirken.html#footnotes",
    "title": "Mitwirken",
    "section": "Footnotes",
    "text": "Footnotes\nHere is a footnote reference,2 and another.3\nThis paragraph won’t be part of the note, because it isn’t indented.\n\n\n\n\nKnuth, Donald E. 1984. „Literate Programming“. Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]